
assembler-project/
├─ assembler                 <- Built binary (after linking)
├─ Makefile                  <- Build rules (C90: -ansi -pedantic -Wall, includes) + Test utility 
│
├─ include/                  <- Public headers shared across modules
│  ├─ assembler.h            <- High-level API: assemble_file(); global toggles (e.g., fail-fast)
│  ├─ codeimg.h              <- Code/Data image container + helpers (push/relocate/size/at)
│  ├─ debug.h                <- Debug/logging macros
│  ├─ defaults.h             <- Global constants & limits; base-4 alphabet (a/b/c/d), word width
│  ├─ encoding.h             <- Data/string/mat parsers; size estimator; helpers (int/reg); strip comments
│  ├─ encoding_parse.h       <- ParsedInstr + encoding_parse_instruction() (shared with Pass 2)
│  ├─ errors.h               <- Error list/collector API (add/print); errors_count()
│  ├─ hash_core.h            <- Hash internals for NameSet
│  ├─ identifiers.h          <- Reserved-identifier checks + name validators
│  ├─ isa.h                  <- ISA bit layout (10-bit words); pack helpers (first word, A/R/E, reg words)
│  ├─ macro.h                <- Macro table API (used by preassembler)
│  ├─ nameset.h              <- Generic string hash-set (identifiers namespace)
│  ├─ output.h               <- .ob/.ent/.ext writers (base-4 a/b/c/d; 5-char words)
│  ├─ pass1.h                <- Pass 1 interface (symbols, code/data images)
│  ├─ pass2.h                <- Pass 2 interface (final code image, .ext uses, .ent list)
│  ├─ preassembler.h         <- Stage-0 API: preassemble() (macro expansion to .am)
│  └─ symbols.h              <- Symbol table types/API (CODE/DATA/EXTERN/ENTRY; lookup; foreach)
│
├─ src/                      <- Actual C implementation
│  ├─ assembler.c            <- Orchestrates: preassemble → pass1 → pass2; prints errors; writes outputs
│  ├─ codeimg.c              <- Image storage, push_word, relocation; size/at accessors
│  ├─ debug.c                <- Debug helpers
│  ├─ encoding.c             <- .data/.string/.mat parsing; size estimate; full instruction parse (matrix);
│  │                          immediate/register fixes; strip_comment_inplace()
│  ├─ errors.c               <- Error aggregation + printing to stderr; errors_count()
│  ├─ hash_core.c            <- Hash utilities for NameSet
│  ├─ identifiers.c          <- Reserved words list + valid name checks
│  ├─ isa.c                  <- ISA helpers (first-word/A-R-E/reg encoders) backing the header
│  ├─ macro.c                <- Macro define/lookup storage
│  ├─ main.c                 <- CLI driver; iterates .as files; handles flags; calls assemble_file()
│  ├─ nameset.c              <- String hash-set implementation
│  ├─ output.c               <- Base-4 (a/b/c/d) writers; 10-bit words padded to 5 chars; header uses separate buffers
│  ├─ pass1.c                <- First pass: labels + externs/entries, placeholders, data image; ignores comments
│  ├─ pass2.c                <- Second pass: resolve symbols; emit extra words (direct/matrix/regs/imm);
│  │                          record extern use-sites; collect entries; ignore comments
│  ├─ preassembler.c         <- Expands macros to .am; records macro names into NameSet; ignores comments
│  └─ symbols.c              <- Symbol table (define/lookup/mark entry/extern; foreach iterator; relocation)
│
├─ build/                    <- Object files + intermediate artefacts (auto-created)
│  ├─ assembler.o
│  ├─ codeimg.o
│  ├─ debug.o
│  ├─ encoding.o
│  ├─ errors.o
│  ├─ hash_core.o
│  ├─ identifiers.o
│  ├─ isa.o
│  ├─ macro.o
│  ├─ main.o
│  ├─ nameset.o
│  ├─ output.o
│  ├─ pass1.o
│  ├─ pass2.o
│  ├─ preassembler.o
│  └─ symbols.o
│
└─ doc/
   └─ structure              <- Project docs (expand as needed)
